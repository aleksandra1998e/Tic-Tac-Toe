---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by aleksandra.
--- DateTime: 10/01/2023 23:41
---

local AI = {}
AI.__index = AI

-- Function to create a new AI player
function AI:new(mark)
    local self = setmetatable({}, AI)
    self.mark = mark
    return self
end


local function minimax(board, depth, isMaximizingPlayer, mark)
    local result = board:check_for_win()
    if result ~= nil then -- game over
        if result == mark then
            return 10 - depth
        elseif result == 'D' then
            return 0
        else
            return depth - 10
        end
    end

    if board:is_full() then -- draw
        return 0
    end

    if isMaximizingPlayer then
        local bestScore = -math.huge
        for i = 1, board.size do
            for j = 1, board.size do
                if board.grid[i][j] == nil then
                    board.grid[i][j] = mark
                    local score = minimax(board, depth + 1, false, mark)
                    bestScore = math.max(score, bestScore)
                    board.grid[i][j] = nil
                end
            end
        end
        return bestScore
    else
        local bestScore = math.huge
        for i = 1, board.size do
            for j = 1, board.size do
                if board.grid[i][j] == nil then
                    board.grid[i][j] = 'X' -- assuming the other player is 'X'
                    local score = minimax(board, depth + 1, true, mark)
                    bestScore = math.min(score, bestScore)
                    board.grid[i][j] = nil
                end
            end
        end
        return bestScore
    end
end


-- Function for the AI player to make a move
function AI:get_move(board)
    local bestScore = -math.huge
    local move
    for i = 1, board.size do
        for j = 1, board.size do
            if board.grid[i][j] == nil then
                board.grid[i][j] = self.mark
                local score = minimax(board, 0, false, self.mark)
                board.grid[i][j] = nil
                if score > bestScore then
                    bestScore = score
                    move = {i, j}
                end
            end
        end
    end
    board:make_move(move[1], move[2], self.mark)
    return move[1], move[2]
end


return AI
